/**
 * This code was generated by Builder.io.
 */
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import FAQItem from "./FAQItem";

describe("FAQItem", () => {
  const mockFAQ = {
    question: "Test Question",
    answer: "Test Answer",
    category: "Test Category",
  };

  test("renders FAQ question", () => {
    render(<FAQItem faq={mockFAQ} />);
    const questionElement = screen.getByText(/Test Question/i);
    expect(questionElement).toBeInTheDocument();
  });

  test("expands to show answer when clicked", () => {
    render(<FAQItem faq={mockFAQ} />);
    const questionButton = screen.getByRole("button");
    fireEvent.click(questionButton);
    const answerElement = screen.getByText(/Test Answer/i);
    expect(answerElement).toBeInTheDocument();
  });

  test("displays category tag when expanded", () => {
    render(<FAQItem faq={mockFAQ} />);
    const questionButton = screen.getByRole("button");
    fireEvent.click(questionButton);
    const categoryElement = screen.getByText(/Test Category/i);
    expect(categoryElement).toBeInTheDocument();
  });

  test("collapses when clicked again", () => {
    render(<FAQItem faq={mockFAQ} />);
    const questionButton = screen.getByRole("button");
    fireEvent.click(questionButton);
    fireEvent.click(questionButton);
    const answerElement = screen.queryByText(/Test Answer/i);
    expect(answerElement).not.toBeInTheDocument();
  });
});
